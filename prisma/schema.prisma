// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  photos      String[]
  description String
  title       String
  coverPhoto  String?
  postDate    DateTime
  postType    String?
  highlights  Boolean?
  sample Boolean?
  orderBy Int?
  portfolioNo Int?
  venueId     String?  @db.ObjectId
  venue       Venue?   @relation("VenueField", fields: [venueId], references: [id], onDelete: Cascade)
  employeeId  String?  @db.ObjectId
  employee    Employee? @relation("EmployeePhotoField", fields: [employeeId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id  String   @id @default(auto()) @map("_id") @db.ObjectId
  url String
  tag String[]
  orderBy Int?
}

type PhotoObject {
  photo String
  tag   String
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  brideName String
  groomName String
  email String
  weddingDate DateTime
  songSelection String
  highlightSong String?
  videoSongs String?
  details String?
  address String?
  city String?
  state String?
  zipCode String?
}

model Bridal {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
  phone String?
  weddingDate DateTime?
  details String?
}

model Venue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  name        String
  hero        String?
  createAt    DateTime @default(now())
  blogs       Blog[]   @relation("VenueField")
  videos VideoPortfolio[] @relation("VideoField")
}

model VideoPortfolio {
   id      String   @id @default(auto()) @map("_id") @db.ObjectId
   title String
   description String
   videoName     String  
   hero String?
   createAt    DateTime @default(now())
   venueId String?  @db.ObjectId
   venue   Venue?   @relation("VideoField", fields: [venueId], references: [id], onDelete: Cascade)
   orderBy Int?
   portfolioNo Int?
    employeeId  String?  @db.ObjectId
    employee    Employee? @relation("EmployeeVideoField", fields: [employeeId], references: [id], onDelete: Cascade)
}

model Employee {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String?
  phone       String?
  title    String
  role String?
  orderBy Int?
  details String[]
  photo       String?  
  photography    Blog[] @relation("EmployeePhotoField") 
  videography    VideoPortfolio[] @relation("EmployeeVideoField")
}

